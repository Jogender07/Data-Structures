#include <stdio.h>
#define SIZE 5   // Maximum size of Queue

int queue[SIZE];
int front = -1, rear = -1;

// Function to check if queue is full
int isFull() {
    return rear == SIZE - 1;
}

// Function to check if queue is empty
int isEmpty() {
    return front == -1 || front > rear;
}

// Function to insert (ENQUEUE) an element
void enqueue(int value) {
    if (isFull()) {
        printf("\nQueue Overflow! Cannot enqueue %d\n", value);
    } else {
        if (front == -1) front = 0;
        rear++;
        queue[rear] = value;
        printf("%d enqueued to queue.\n", value);
    }
}

// Function to remove (DEQUEUE) an element
void dequeue() {
    if (isEmpty()) {
        printf("\nQueue Underflow! No element to dequeue.\n");
    } else {
        printf("%d dequeued from queue.\n", queue[front]);
        front++;
    }
}

// Function to display queue elements
void display() {
    if (isEmpty()) {
        printf("\nQueue is empty.\n");
    } else {
        printf("\nQueue elements are:\n");
        for (int i = front; i <= rear; i++) {
            printf("%d ", queue[i]);
        }
        printf("\n");
    }
}

int main() {
    int choice, value;

    while (1) {
        printf("\n--- Queue Menu ---\n");
        printf("1. ENQUEUE\n2. DEQUEUE\n3. DISPLAY\n4. EXIT\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
        case 1:
            printf("Enter value to enqueue: ");
            scanf("%d", &value);
            enqueue(value);
            break;
        case 2:
            dequeue();
            break;
        case 3:
            display();
            break;
        case 4:
            printf("Exiting...\n");
            return 0;
        default:
            printf("Invalid choice! Try again.\n");
        }
    }
}
